<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别从低到高优先级为: ALL < TRACE < DEBUG < INFO < WARN < ERROR < FATAL < OFF -->
<!-- configuration后面的status,这个用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时,你会看到log4j2内部各种详细输出 -->
<!--monitorInterval: 监视配置文件变化间隔时间,单位秒,Log4j2能够自动检测配置文件是否修改,同时更新配置 -->
<configuration monitorInterval="5">
    <!-- 变量配置 -->
    <!-- 定义属性,在下方方便维护引用 -->
    <Properties>
        <!--当天文件保存目录,建议不要配置相对路径-->
        <property name="LOG_DIR">E:\Learning\Java_project\WebProjectDemo\src\main\resources\log</property>
        <!--历史文件保存目录-->
        <property name="HISTORY_LOG_DIR">${LOG_DIR}/logs/history</property>
        <!--项目名称-->
        <property name="FILE_NAME" value="log4j2"/>
        <!--如果当天日志文件大于100MB,则存档-->
        <property name="SPLIT_SIZE">100MB</property>
        <!--文件保存个数，这里的30说明可保留30个,即30天-->
        <property name="FILE_COUNT">30</property>
        <!--interval属性用来指定多久滚动一次,默认是1 hour-->
        <property name="INTERVAL">30</property>
        <!--输出日志的格式:%d表示日期时间,%thread表示线程名,%-5level级别从左显示5个字符宽度,%logger{50}表示logger名字最长50个字符,否则按照句点分割,%line表示行号,%msg日志消息,%n换行符-->
        <property name="LOG_PATTERN">%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{50}:(%line) - %msg%n
        </property>
    </Properties>

    <!--先定义所有的appender附加器-->
    <appenders>
        <!--1、控制台输出配置-->
        <console name="Console" target="SYSTEM_OUT">
            <!--控制台只输出level及其以上级别的信息(onMatch),其他的直接拒绝(onMismatch)-->
            <!--<ThresholdFilter level="info" onMatch="ACCEPT" onMis match="DENY"/>-->
            <filters>
                <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>
            </filters>
            <!--输出日志的格式-->
            <PatternLayout pattern="${LOG_PATTERN}"/>
        </console>

        <!-- 2、输出日志信息到文件存储 -->
        <!--文件存储文件设置-->
        <!--文件会打印出所有信息,这个log每次运行程序会自动清空,由append属性决定,适合临时测试用-->
        <File name="FileLog" fileName="${LOG_DIR}/SystemOut.log" append="false">
            <PatternLayout pattern="${LOG_PATTERN}"/>
        </File>

        <!-- 3、输出日志信息滚动到文件存储 -->
        <!--fileName:文件存储路径及名称,可以是绝对路径或者相对路径,存储的永远是最新的日志信息-->
        <!--filePattern:当fileName指定的文件大小超过限制,就会根据此文件名规则新建存档目录与文件,同时将fileName文件中的
         内容剪切到存档文件中,如下配置,会新建存档路径 logs/history/log4j2-DEBUG-2021-03-26-1.log.gz -->
        <!-- 这个会打印出所有的debug级别的信息,每次大小超过size,则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩,作为存档-->
        <!--以下只保存debug信息-->
        <RollingFile name="RollingFileDebug" fileName="${LOG_DIR}/SystemOutRolling_debug.log"
                     filePattern="${HISTORY_LOG_DIR}/${FILE_NAME}-DEBUG-%d{yyyy-MM-dd}-%i.log.gz">
            <!--控制台只输出level级别的信息-->
            <!--
            <LevelFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            -->
            <!--
            onMatch和onMismatch都有三个属性值，分别为Accept、DENY和NEUTRAL
            onMatch="ACCEPT" 表示匹配该级别及以上
            onMatch="DENY" 表示不匹配该级别及以上
            onMatch="NEUTRAL" 表示该级别及以上的,由下一个filter处理,如果当前是最后一个,则表示匹配该级别及以上
            onMismatch="ACCEPT" 表示匹配该级别以下
            onMismatch="NEUTRAL" 表示该级别及以下的,由下一个filter处理,如果当前是最后一个,则不匹配该级别以下的
            onMismatch="DENY" 表示不匹配该级别以下的
            -->
            <filters>
                <ThresholdFilter level="INFO" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY"/>
            </filters>
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <Policies>
                <!--interval属性用来指定多久滚动一次,默认是1 hour-->
                <TimeBasedTriggeringPolicy interval="${INTERVAL}"/>
                <!--日志文件大小超过多少时进行存档-->
                <SizeBasedTriggeringPolicy size="${SPLIT_SIZE}"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置,则默认为最多同一文件夹下7个文件开始覆盖-->
            <DefaultRolloverStrategy max="${FILE_COUNT}"/>
        </RollingFile>

        <!--以下只保存info信息-->
        <RollingFile name="RollingFileInfo" fileName="${LOG_DIR}/SystemOutRolling_info.log"
                     filePattern="${HISTORY_LOG_DIR}/${FILE_NAME}-INFO-%d{yyyy-MM-dd}-%i.log.gz">
            <!--控制台只输出level级别的信息-->
            <!--
            <LevelFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            -->
            <filters>
                <ThresholdFilter level="WARN" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>
            </filters>
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <Policies>
                <!--interval属性用来指定多久滚动一次,默认是1 hour-->
                <TimeBasedTriggeringPolicy interval="${INTERVAL}"/>
                <!--日志文件大小超过多少时进行存档-->
                <SizeBasedTriggeringPolicy size="${SPLIT_SIZE}"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置,则默认为最多同一文件夹下7个文件开始覆盖-->
            <DefaultRolloverStrategy max="${FILE_COUNT}"/>
        </RollingFile>

        <!--以下只保存warn信息-->
        <RollingFile name="RollingFileWarn" fileName="${LOG_DIR}/SystemOutRolling_warn.log"
                     filePattern="${HISTORY_LOG_DIR}/${FILE_NAME}-WARN-%d{yyyy-MM-dd}-%i.log.gz">
            <!--控制台只输出level级别的信息-->
            <!--
            <LevelFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
            -->
            <filters>
                <ThresholdFilter level="ERROR" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="WARN" onMatch="ACCEPT" onMismatch="DENY"/>
            </filters>
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <Policies>
                <!--interval属性用来指定多久滚动一次,默认是1 hour-->
                <TimeBasedTriggeringPolicy interval="${INTERVAL}"/>
                <!--日志文件大小超过多少时进行存档-->
                <SizeBasedTriggeringPolicy size="${SPLIT_SIZE}"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置,则默认为最多同一文件夹下7个文件开始覆盖-->
            <DefaultRolloverStrategy max="${FILE_COUNT}"/>
        </RollingFile>

        <!--以下只保存error信息-->
        <RollingFile name="RollingFileError" fileName="${LOG_DIR}/SystemOutRolling_error.log"
                     filePattern="${HISTORY_LOG_DIR}/${FILE_NAME}-ERROR-%d{yyyy-MM-dd}-%i.log.gz">
            <!--控制台只输出level级别的信息-->
            <!--
            <LevelFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            -->
            <filters>
                <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            </filters>
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <Policies>
                <!--interval属性用来指定多久滚动一次,默认是1 hour-->
                <TimeBasedTriggeringPolicy interval="${INTERVAL}"/>
                <!--日志文件大小超过多少时进行存档-->
                <SizeBasedTriggeringPolicy size="${SPLIT_SIZE}"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置,则默认为最多同一文件夹下7个文件开始覆盖-->
            <DefaultRolloverStrategy max="${FILE_COUNT}"/>
        </RollingFile>

        <!--以下保存api请求信息-->
        <RollingFile name="ApiInfo" fileName="${LOG_DIR}/SystemOutRolling_api.log"
                     filePattern="${HISTORY_LOG_DIR}/${FILE_NAME}-API-%d{yyyy-MM-dd}-%i.log.gz">
            <filters>
                <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            </filters>
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <Policies>
                <!--interval属性用来指定多久滚动一次,默认是1 hour-->
                <TimeBasedTriggeringPolicy interval="${INTERVAL}"/>
                <!--日志文件大小超过多少时进行存档-->
                <SizeBasedTriggeringPolicy size="${SPLIT_SIZE}"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置,则默认为最多同一文件夹下7个文件开始覆盖-->
            <DefaultRolloverStrategy max="${FILE_COUNT}"/>
        </RollingFile>

        <!-- 整合elk -->
<!--        <Socket name="Logstash" host="127.0.0.1" port="4560" protocol="TCP">-->
<!--            <PatternLayout pattern="${logPattern}"/>-->
<!--        </Socket>-->

    </appenders>

    <!--
    1、root与logger是父子关系,没有特别定义logger的都默认为root。
    2、任何一个类只会和一个logger对应,要么是定义的logger,要么是root,判断的关键在于找到这个logger,然后判断这个logger的appender和level
    3、appender-ref用于引用上面定义好的appender日志追加器,只有引用了,上面的appender才能生效
    -->
    <!--Logger节点用来单独指定日志的形式,比如要为指定包下的class指定不同的日志级别等 -->
    <!--然后定义logger,只有定义了logger并引入的appender,appender才会生效-->
    <loggers>
        <!--过滤掉spring和mybatis的一些无用的DEBUG信息;也可以单独指定自己的某个包-->
        <!--以下包中ERROR级别以上日志在root中将被记录-->
        <!--
        <logger name="org.springframework" level="ERROR"></logger>
        <logger name="org.mybatis" level="ERROR"></logger>
        <logger name="org.hibernate" level="ERROR"></logger>
        <logger name="org.apache" level="ERROR"></logger>
        <logger name="com.baomidou" level="ERROR"></logger>
        <logger name="com.zaxxer" level="ERROR"></logger>
        <logger name="springfox.documentation" level="ERROR"></logger>
        -->
        <!-- 控制该包下的日志等级 -->
        <!--com.log.controller包中的DEBUG以上信息在以下的appender中输出,additivity所有日志还要向控制台和allLog中输出-->
        <!--
        <logger name="com.log.controller" level="DEBUG" additivity="true">
            <appender-ref ref="RollingFileDebug"/>
            <appender-ref ref="RollingFileInfo"/>
            <appender-ref ref="RollingFileWarn"/>
            <appender-ref ref="RollingFileError"/>
            <appender-ref ref="Console"/>
            <appender-ref ref="FileLog"/>
        </logger>
        -->
        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
        <logger name="org.mybatis" level="debug" additivity="true">
            <appender-ref ref="Console"/>
            <appender-ref ref="FileLog"/>
            <appender-ref ref="RollingFileDebug"/>
            <appender-ref ref="RollingFileWarn"/>
            <appender-ref ref="RollingFileError"/>
        </logger>
        <!--监控系统信息-->
        <!--若是additivity设为false,则子Logger只会在自己的appender里输出,而不会在父Logger的appender里输出 -->
        <Logger name="org.springframework" level="debug" additivity="false">
            <appender-ref ref="Console"/>
            <appender-ref ref="FileLog"/>
            <appender-ref ref="RollingFileDebug"/>
            <appender-ref ref="RollingFileWarn"/>
            <appender-ref ref="RollingFileError"/>
        </Logger>

        <!-- 控制整个项目的日志等级 -->
        <root level="debug">
            <appender-ref ref="Console"/>
            <appender-ref ref="FileLog"/>
            <appender-ref ref="RollingFileDebug"/>
            <appender-ref ref="RollingFileInfo"/>
            <appender-ref ref="RollingFileWarn"/>
            <appender-ref ref="RollingFileError"/>
        </root>

    </loggers>
</configuration>
